<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.myPage.model.mapper.MyPageMapper">

	<!-- 암호화된 비밀번호 조회 -->
	<select id="selectEncPw" parameterType="_int"
		resultType="string">
		SELECT MEMBER_PW
		FROM "TB_MEMBER"
		WHERE MEMBER_NO =
		#{memberNo}
	</select>


	<!-- 비밀번호 변경 -->
	<update id="changePw">
		UPDATE "TB_MEMBER" SET
		MEMBER_PW = #{encPw}
		WHERE MEMBER_NO = #{memberNo}
	</update>


	<!-- 비밀번호 비교 조회 -->
	<select id="memberPwCheck">
		SELECT MEMBER_PW
		FROM "TB_MEMBER"
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	
	<!-- 네이버 회원 삭제 -->
	<delete id="membershipNaverOut">
		DELETE FROM "TB_MEMBER"
		WHERE MEMBER_NO = #{memberNo}
		AND NAVER_FL = 'Y'
	</delete>


	<!-- 회원정보 조회 -->
	<select id="getMemberInfo">
		SELECT
		MEMBER_NO, MEMBER_ID, MEMBER_TEL,
		MEMBER_NICKNAME, MEMBER_EMAIL, MEMBER_GENDER, NAVER_FL
		FROM "TB_MEMBER"
		WHERE
		MEMBER_NO = #{memberNo}
	</select>
 	
	
	<!-- 이메일 중복검사 -->
	<select id="verifyEmail" resultType="_int">
		SELECT COUNT(*)
		FROM
		"TB_MEMBER"
		WHERE MEMBER_DEL_FL = 'N'
		AND MEMBER_EMAIL = #{memberEmail}
	</select>
	
	
	<!-- 닉네임 중복검사 -->
	<select id="updateNickname" resultType="_int">
		SELECT COUNT(*)
		FROM
		"TB_MEMBER"
		WHERE MEMBER_DEL_FL = 'N'
		AND MEMBER_NICKNAME =
		#{memberNickname}
	</select>
	
	
	<!-- 회원 탈퇴 처리 -->
	<update id="membershipOut">
		UPDATE "TB_MEMBER"
		SET
			MEMBER_DEL_FL = 'Y'
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	
	<!-- 회원 정보 수정 -->
	<update id="updateMember">
        UPDATE "TB_MEMBER" SET
        MEMBER_EMAIL = #{memberEmail},
        MEMBER_NICKNAME = #{memberNickname},
        MEMBER_TEL = #{memberTel},
        MEMBER_GENDER = #{memberGender}
        WHERE MEMBER_NO = #{memberNo}
    </update>
    
    
    
    <!-- 배송지 목록 조회(로드) -->
    <select id="selectAddressList" parameterType="_int" resultType="AddressDTO">
    SELECT ADDRESS_NO, MEMBER_NO, RECEIVERNAME, POSTCODE, ADDRESS, 
           DETAILADDRESS, PHONE, EXTRAPHONE, BASIC_ADDRESS
    FROM "TB_ADDRESS"
    WHERE MEMBER_NO = #{memberNo}
    ORDER BY BASIC_ADDRESS DESC, ADDRESS_NO DESC
</select>

 
    
     <!-- 배송지 추가 -->
    <insert id="insertAddress" parameterType="edu.kh.project.myPage.model.dto.AddressDTO">
    INSERT INTO "TB_ADDRESS" (
        ADDRESS_NO,          
        MEMBER_NO, 
        RECEIVERNAME, 
        POSTCODE, 
        ADDRESS, 
        DETAILADDRESS, 
        PHONE, 
        EXTRAPHONE,
        BASIC_ADDRESS       
    ) VALUES (
        SEQ_KEY_NO.NEXTVAL,  
        #{memberNo}, 
        #{receiverName}, 
        #{postcode}, 
        #{address}, 
        #{detailAddress}, 
        #{phone}, 
        #{extraPhone},
        'N'                 
    )
</insert>
    
    <!-- 중복 주소 체크  -->
    <select id="countDuplicateAddress" parameterType="map" resultType="int">
    SELECT COUNT(*) 
    FROM "TB_ADDRESS" 
    WHERE MEMBER_NO = #{memberNo} 
    AND ADDRESS = #{address} 
    AND DETAILADDRESS = #{detailAddress}
   </select>
    
    
    <!-- 주소 개수 체크 -->
    <select id="getAddressCount" parameterType="_int" resultType="_int">
    SELECT COUNT(*) FROM "TB_ADDRESS"
    WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 기존 기본 배송지 해제하기 -->
	<update id="resetBasicAddress" parameterType="int">
    UPDATE "TB_ADDRESS" 
    SET BASIC_ADDRESS = 'N'
    WHERE MEMBER_NO = #{memberNo}
	</update>

	<!-- 새로운 기본 배송지 설정하기 -->
	<update id="basicAddress" parameterType="map">
    UPDATE "TB_ADDRESS" 
    SET BASIC_ADDRESS = 'Y'
    WHERE ADDRESS_NO = #{addressNo}
    AND MEMBER_NO = #{memberNo}
	</update>
	
	

	<!-- 배송지 수정 -->
	<update id="updateAddress" parameterType="AddressDTO">
    UPDATE TB_ADDRESS
    SET RECEIVERNAME = #{receiverName},
        POSTCODE = #{postcode},
        ADDRESS = #{address},
        DETAILADDRESS = #{detailAddress},
        PHONE = #{phone},
        EXTRAPHONE = #{extraPhone}
    WHERE ADDRESS_NO = #{addressNo}
	</update>
	
	
	<!-- 주소 데이터 조회 -->
	<select id="selectAddress" parameterType="int" resultType="AddressDTO">
    SELECT ADDRESS_NO, MEMBER_NO, RECEIVERNAME, POSTCODE, ADDRESS, 
           DETAILADDRESS, PHONE, EXTRAPHONE, BASIC_ADDRESS
    FROM "TB_ADDRESS"
    WHERE ADDRESS_NO = #{addressNo}
	</select>
	
	
	
	<!-- 배송지 삭제 -->
	<delete id="deleteAddress" parameterType="map">
    DELETE FROM "TB_ADDRESS"
    WHERE ADDRESS_NO = #{addressNo}
    AND MEMBER_NO = #{memberNo}
	</delete>
    
    
    <!-- 사용자 찜한 목록 조회 -->
    <select id="userWishList">
    	SELECT
		    MT20ID,
		    PRFNM,
		    PRFPDFROM,
		    PRFPDTO,
		    FCLTYNM,
		    PRFRUNTIME,
		    POSTER,
		    PRFREVIEW_RANK,
		    MEMBER_NO
		FROM (
		    SELECT 
		        A.*,
		        ROWNUM AS RN
		    FROM (
		        SELECT
		            MT20ID,
		            PRFNM,
		            PRFPDFROM,
		            PRFPDTO,
		            FCLTYNM,
		            PRFRUNTIME,
		            POSTER,
		            PRFREVIEW_RANK,
		            MEMBER_NO
		        FROM TB_PERFORMANCES_DETAIL
		        JOIN TB_PERFORMANCE_WISH USING(MT20ID)
		        WHERE MEMBER_NO = #{memberNo}
		        ORDER BY MT20ID DESC
		    ) A
		)
		<![CDATA[
			WHERE RN > #{offset} AND RN <= #{offset} + #{pageSize}
		]]>
    </select>
    
    <!-- 찜목록 삭제 -->
	<delete id="deleteWishlistItems" parameterType="map">
	    DELETE FROM TB_PERFORMANCE_WISH 
	    WHERE MEMBER_NO = #{memberNo}
	    AND MT20ID IN
	    <foreach collection="performanceIds" item="id" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</delete>
	
	
    
    <!-- 예매 상세 정보 조회 -->
	<select id="selectBookingHistory" parameterType="int" resultType="edu.kh.project.myPage.model.dto.ticketInfoDTO">
	    SELECT
	        TO_CHAR(BOOKING_DATE, 'YYYY-MM-DD HH24:MI:SS') AS BOOKING_DATE,
        	TO_CHAR(PAID_AT, 'YYYY-MM-DD HH24:MI:SS') AS PAID_AT,
	        BOOKING_ID AS bookingId,
	        PERFORMANCE_NAME AS performanceName,  
	        SHOW_DATE_TIME AS showDateTime,
	        TICKET_COUNT AS ticketCount,
	        TO_CHAR(CANCELABLE_UNTIL, 'YYYY-MM-DD HH24:MI:SS') AS CANCELABLE_UNTIL,
	        BOOKING_STATUS AS bookingStatus,
	        MEMBER_NO AS memberNo,
        	MT20ID AS mt20id
	    FROM TB_BOOKING_HISTORY
	    WHERE  MEMBER_NO = #{memberNo}
	    ORDER BY BOOKING_DATE DESC
	</select>
	
	
	<!-- 예매 상세 정보 조회 -->
	<select id="selectBookingDetail" resultType="edu.kh.project.myPage.model.dto.ticketInfoDTO">
	    SELECT 
	        tb.BOOKING_DATE AS bookingDate,
	        tp.PAID_AT AS paidAt,
	        tb.MERCHANT_UID AS bookingId,
	        pd.PRFNM AS performanceName,
	        pd.POSTER AS poster,
	        pd.FCLTYNM AS fcltyName,
	        TO_CHAR(ts.SHOW_DATE, 'YYYY-MM-DD') || ' ' || ts.SHOW_TIME AS showDateTime,
	        COUNT(ts.SEATS_ID) AS ticketCount,
	        LISTAGG(ts.SEATS_ID, ', ') WITHIN GROUP (ORDER BY ts.SEATS_ID) AS seatInfo,
	        TRUNC(ts.SHOW_DATE - 1) AS cancelableUntil,
	        CASE 
	            WHEN ts.SEAT_STATUS = 'BOOKED' THEN '예매'
	            WHEN ts.SEAT_STATUS = 'CANCELED' THEN '취소'
	            ELSE '기타'
	        END AS bookingStatus,
	        tp.PAID_AMOUNT AS totalPaid
	    FROM 
	        TB_TICKET_BOOKING tb
	    JOIN TB_TICKET_SEAT ts 
		   ON tb.MERCHANT_UID = ts.MERCHANT_UID
	    JOIN TB_PERFORMANCES_DETAIL pd ON tb.MT20ID = pd.MT20ID
	    JOIN TB_PAYMENT tp ON tb.MERCHANT_UID = tp.MERCHANT_UID
	    WHERE 
	        tb.MERCHANT_UID = #{bookingId}
	        AND tb.MEMBER_NO = #{memberNo}
	    GROUP BY 
	        tb.BOOKING_DATE, tp.PAID_AT, tb.MERCHANT_UID, pd.PRFNM, pd.POSTER, pd.FCLTYNM, ts.SHOW_DATE, ts.SHOW_TIME, ts.SEAT_STATUS, tp.PAID_AMOUNT
	</select>
	
	
</mapper>
