<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.performance.model.mapper.PerformanceMapper">

	<!-- 장르별 공연 목록 조회 -->
	<select id="genre" resultType="Performance">
	    SELECT MT20ID, PRFNM, PRFPDFROM, PRFPDTO, FCLTYNM, POSTER, PRFREVIEW_RANK
	    FROM TB_PERFORMANCES_DETAIL
	    WHERE GENRENM = #{genre}
	</select>
	
	<!-- 장르별 공연 목록 페이징 조회 -->
	<select id="genreWithPaging" resultType="Performance">
	    SELECT *
	    FROM (
	        SELECT
	            p.MT20ID, p.PRFNM, p.PRFPDFROM, p.PRFPDTO, p.FCLTYNM, p.POSTER, p.PRFREVIEW_RANK,
	            <if test="filter == 'rating'">
	                COALESCE(p.PRFREVIEW_RANK, 0) as RATING,
	            </if>
	            ROW_NUMBER() OVER (
	                ORDER BY
	                <choose>
	                    <when test="filter == 'rating'">
	                        COALESCE(p.PRFREVIEW_RANK, 0) DESC, p.PRFPDFROM DESC
	                    </when>
	                    <when test="filter == 'upcoming'">
	                        p.PRFPDFROM ASC
	                    </when>
	                    <when test="filter == 'ongoing'">
	                        p.PRFPDTO ASC
	                    </when>
	                    <otherwise>
	                        p.PRFPDFROM DESC
	                    </otherwise>
	                </choose>
	            ) AS RN
	        FROM TB_PERFORMANCES_DETAIL p
	        WHERE p.GENRENM = #{genre}
	        <if test="filter == 'upcoming'">
	       	<![CDATA[
	            AND p.PRFPDFROM > TRUNC(SYSDATE)
	        ]]>
	        </if>
	        <if test="filter == 'ongoing'">
	        <![CDATA[
	            AND p.PRFPDFROM <= TRUNC(SYSDATE)
	            AND p.PRFPDTO >= TRUNC(SYSDATE)
	        ]]>
	        </if>
	    )
    <![CDATA[
	    WHERE RN > #{offset} AND RN <= #{offset} + #{pageSize}
	]]>
	</select>
	
	<!-- 공연 상세페이지 조회 -->
	<select id="detail">
		SELECT MT20ID, POSTER, PRFNM, FCLTYNM, PRFPDFROM, PRFPDTO,  PRFRUNTIME, PRFCAST, PCSEGUIDANCE, PRFREVIEW_RANK
		FROM TB_PERFORMANCES_DETAIL
		WHERE MT20ID = #{mt20id}
	</select>
	
	<!-- 공연 위도, 경도 조회 -->
	<select id="selectPerformanceById">
		SELECT FCLTLA, FCLTLO
		FROM TB_VENUE JOIN TB_PERFORMANCES_DETAIL USING(MT10ID)
		WHERE MT20ID = #{mt20id}
	</select>
	
	<!-- 스케줄 및 잔여 좌석 조회 -->
	<select id="getScheduleData" resultType="map">
        SELECT 
		   p.MT20ID,
		   pt.DAY_OF_WEEK,
		   CASE 
		       WHEN pt.DAY_OF_WEEK = 1 THEN '월요일'
		       WHEN pt.DAY_OF_WEEK = 2 THEN '화요일'
		       WHEN pt.DAY_OF_WEEK = 3 THEN '수요일'
		       WHEN pt.DAY_OF_WEEK = 4 THEN '목요일'
		       WHEN pt.DAY_OF_WEEK = 5 THEN '금요일'
		       WHEN pt.DAY_OF_WEEK = 6 THEN '토요일'
		       WHEN pt.DAY_OF_WEEK = 7 THEN '일요일'
		   END AS day_name,
		   pt.PERFORMANCE_TIME as time,
		   COALESCE((
		       SELECT SUM(vsi.SEAT_COUNT)
		       FROM TB_VENUE_SEAT_INFO vsi
		       JOIN TB_PERFORMANCES_DETAIL pd ON vsi.MT10ID = pd.MT10ID
		       WHERE pd.MT20ID = p.MT20ID
		   ), 0) - COUNT(CASE 
		       WHEN ts.SEAT_STATUS != 'booked' 
		       AND ts.SHOW_DATE >= TRUNC(SYSDATE) 
		       THEN 1 
		   END) as seats,
		   'available' as status  
		FROM 
		   TB_PERFORMANCES_DETAIL p
		   INNER JOIN TB_PERFORMANCE_TIME pt ON p.MT20ID = pt.MT20ID
		   LEFT JOIN TB_TICKET_SEAT ts ON (
		       ts.MT20ID = p.MT20ID
		       AND ts.SHOW_TIME = pt.PERFORMANCE_TIME
		       AND ts.SHOW_DATE >= TRUNC(SYSDATE)
		   )
		WHERE 
		   p.MT20ID = #{mt20id}
		   AND pt.DAY_OF_WEEK IS NOT NULL
		GROUP BY 
		   p.MT20ID,
		   pt.DAY_OF_WEEK,
		   pt.PERFORMANCE_TIME
		ORDER BY 
		   pt.DAY_OF_WEEK, 
		   pt.PERFORMANCE_TIME
    </select>
    
    <!-- 주요 공연 소개 -->
    <select id="mainPerform">
    	<![CDATA[
	    	SELECT
				MT20ID,
				POSTER,
				PRFNM
			FROM
				(
					SELECT MT20ID, POSTER, PRFNM
					FROM TB_PERFORMANCES_DETAIL
					ORDER BY
					DBMS_RANDOM.VALUE )
			WHERE
				ROWNUM <= 3
			ORDER BY PRFNM
		]]>
    </select>
    
    
    <!-- 공연 점수 별 순위 10개 -->
    <select id="performanceRanking">
    	<![CDATA[
	    	SELECT *
			FROM (
			    SELECT 
			        MT20ID,
			        PRFNM,
			        POSTER,
			        PRFREVIEW_RANK,
			        REVIEW_COUNT,
			        AVG_RATING
			    FROM 
			        ETFIVE.VW_PERFORMANCE_RANKING
			    ORDER BY 
			        PRFREVIEW_RANK DESC, AVG_RATING DESC
			) 
			WHERE ROWNUM <= 10
		]]>
	</select>
    
    <!-- 리뷰 등록 -->
    <insert id="insertReview">
    	INSERT INTO TB_PERFORMANCE_REVIEW
        VALUES (
        	SEQ_REVIEW_NO.NEXTVAL, 
        	#{reviewContent}, 
        	#{reviewStar}, 
        	DEFAULT,
        	NULL, 
        	DEFAULT, 
        	#{memberNo},
        	#{mt20id}
        )
    </insert>
    
    <!-- 리뷰 중복 여부 확인 -->
    <select id="selectReviewCount">
    	SELECT COUNT(*)
    	FROM TB_PERFORMANCE_REVIEW
    	WHERE MEMBER_NO = #{memberNo}
    	AND MT20ID = #{mt20id}
    </select>
    
    <!-- 리뷰 수정 -->
    <update id="updateReview">
    	UPDATE TB_PERFORMANCE_REVIEW
    	SET 
    		REVIEW_CONTENT = #{reviewContent},
    		REVIEW_STAR = #{reviewStar}
    	WHERE REVIEW_NO = #{reviewNo}
    </update>
    
    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
    	DELETE FROM TB_PERFORMANCE_REVIEW
    	WHERE REVIEW_NO = #{reviewNo}
    	AND MEMBER_NO = #{memberNo}
    </delete>
    
    <!-- 리뷰 목록 조회 -->
    <select id="selectReviewsByPerformanceId">
		SELECT MT20ID, REVIEW_STAR, REVIEW_CONTENT, CREATE_DATE, MEMBER_NO, REVIEW_NO, MEMBER_NICKNAME 
		FROM TB_PERFORMANCE_REVIEW JOIN TB_MEMBER USING(MEMBER_NO)
		WHERE MT20ID = #{mt20id}
    </select>
    
    <!-- 공연장 좌석 목록 -->
    <select id="priceSeatInfoList">
    	SELECT
    		SEAT_COUNT,
    		GRADE_ID,
    		GRADE_NAME
    	FROM TB_VENUE_SEAT_INFO
    	JOIN TB_SEAT_GRADE USING(GRADE_ID)
    	WHERE MT10ID = #{mt10id}
    </select>
    
    <!-- 공연 일정 중복 체크 -->
    <select id="getReservedDates">
    	<![CDATA[
	    	SELECT 
			    TO_CHAR(TO_DATE(PRFPDFROM, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS PRFPDFROM,
				TO_CHAR(TO_DATE(PRFPDTO, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS PRFPDTO
			FROM TB_PERFORMANCES_DETAIL
			WHERE MT10ID = #{mt10id}
			AND TO_DATE(PRFPDTO, 'YYYY-MM-DD') >= TRUNC(SYSDATE)
			AND PRFSTATE != '공연취소'
			ORDER BY TO_DATE(PRFPDFROM, 'YYYY-MM-DD')
		]]>
    </select>
    
    <!-- 공연 기본 정보 저장 -->
    <insert id="insertPerformance">
        INSERT INTO TB_PERFORMANCES_DETAIL (
            MT20ID, PRFNM, PRFPDFROM, PRFPDTO, FCLTYNM,
            PRFCAST, PRFRUNTIME, PCSEGUIDANCE, DTGUIDANCE, AREA,
            GENRENM, PRFSTATE, DESCRIPTION, MT10ID, CONCERT_MANAGER_NO
        ) VALUES (
            #{mt20id}, #{prfnm}, #{prfpdfrom}, #{prfpdto}, #{fcltynm},
            #{prfcast}, #{prfruntime}, #{pcseguidance}, #{dtguidance}, #{area},
            #{genrenm}, #{prfstate}, #{description}, #{mt10id}, #{concertManagerNo}
        )
    </insert>
    
    <!-- 공연 가격 정보 저장 -->
    <insert id="insertPerformancePrice">
        INSERT INTO TB_PERFORMANCE_SEAT_PRICE (
            PRICE_ID, MT20ID, GRADE_ID, PRICE
        ) VALUES (
            SEQ_PRICE_ID.NEXTVAL,
            #{mt20id},
            #{grade},
            #{price}
        )
    </insert>
    
    <!-- 공연 시간 정보 저장 -->
    <insert id="insertPerformanceTime">
        INSERT INTO TB_PERFORMANCE_TIME (
            MT20ID, DAY_OF_WEEK, PERFORMANCE_TIME
        ) VALUES (
            #{mt20id}, #{dayOfWeek}, #{performanceTime}
        )
    </insert>
    
    
    <!-- 관리자 공연 등록
    	-> 공연장 이름 또는 주소 검색시 공연장 목록 가져오기
   	 -->
   	 <select id="selectVenueList">
   	 	SELECT MT10ID, FCLTYNM, ADRES, SEATSCALE
   	 	FROM TB_VENUE
   	 </select>
	
</mapper>